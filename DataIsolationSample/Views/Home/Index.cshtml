@model IEnumerable<ToDoItem>

@{
    ViewData["Title"] = "Data Isolation Sample";
}

@if (Context.GetMultiTenantContext<TenantInfo>()?.TenantInfo != null)
{
    <p class="mt-4">Tenant Id: @(Context.GetMultiTenantContext<TenantInfo>()?.TenantInfo.Id ?? "null")</p>
    <p class="my-4">Connection String: @(Context.GetMultiTenantContext<TenantInfo>()?.TenantInfo.ConnectionString ?? "null")</p>
    
    <table class="table">
        <thead>
            <tr>
                <th class="text-muted">Id</th>
                <th></th>
                <th>Title</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td style="width: 4rem" class="text-muted">@item.Id</td>
                    <td style="width: 2rem"><input asp-for="@item.Completed" /></td>
                    <td>@item.Title</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="jumbotron">
        <h1 class="display-4">Hello, world!</h1>
        <p class="lead">This sample highlights the <a href="https://www.finbuckle.com/MultiTenant/Docs/EFCore">per-tenant data with EFCore</a>.</p>
        <hr class="my-4">
        <p>
            The tenancy in this demo is configured with an in-memory tenant store and the built-in route strategy.
        </p>
        <p>
            The <code>MultiTenantDbContext</code> constructor takes a <code>TenantInfo</code> parameter which ASP.NET Core
            provides via dependency injection depending on the current tenant.
        </p>
        <p>
            The database context only returns results for the current tenant (without the need for the app use <em>where</em>).
        </p>
        <p>
            Each of the tenants use a different database per its connection string of "Data Source=App_Data/{TenantInfo.Name}_ToDoList.db".
            This ensures that tenant data is isolated when reading/inserting/updating/deleting.
        </p>
        <p>Click the links on the navbar to see it in action!</p>
    </div> 
}
